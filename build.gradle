plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.asciidoctor.convert' version '1.5.9.1'
    id 'org.ajoberstar.git-publish' version '2.0.0'
    id 'net.researchgate.release' version '2.6.0'
}

group = 'fr.jmini.utils'

repositories {
    jcenter()
}

ext {
    junitVersion = '5.3.1'
}

dependencies {
    testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    useGpgCmd()
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = "$githubRepositoryName".toString()
                description = 'Java library for matching text'
                packaging = 'jar'
                url = 'https://' + "$githubRepositoryOwner" + '.github.io/' + "$githubRepositoryName" + '/'
                licenses {
                    license {
                        name = 'Eclipse Public License - v 2.0'
                        url = 'https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'jmini'
                        name = 'Jeremie Bresson'
                        email = 'dev@jmini.fr'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
                    developerConnection = 'scm:git:https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
                    url = 'https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '/'
                }
            }
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
                pomFile.delete()
            }

            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? mavenPublishUrlSnapshot : mavenPublishUrlRelease
            credentials {
                username = project.findProperty('sonatypeUser') ?: ''
                password = project.findProperty('sonatypePassword') ?: ''
            }
        }
    }
}

model {
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn(project.tasks.signArchives)
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn(project.tasks.signArchives)
    }
}

def buildDate() {
    return new Date().format('yyyy-MM-dd')
}

asciidoctor {
    sourceDir = file('docs')
    outputDir = file('build/docs')
    attributes \
        'revdate': "${buildDate()}",
        'project-version' : "$version",
        'last-stable-version' : "$lastVersion",
        'source-highlighter': 'coderay',
        'imagesdir': '',
        'toc': 'left',
        'icons': 'font',
        'sectanchors': 'true',
        'idprefix': '',
        'idseparator': '-',
        'docinfo1': 'true'

    dependencies {
        asciidoctor "fr.jmini.asciidoctorj:git-link:3.0.0"
    }
}

gitPublish {
    repoUri = 'git@github.com:' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
    branch = 'gh-pages'

    contents {
        from "${file('build/docs/html5')}"
    }

    preserve {
        include '.nojekyll'
    }

    commitMessage = "Update the 'gh-pages' branch."
}

release {
    buildTasks = ['doRelease']
}

task doRelease {
    dependsOn(
        'publish',
        'asciidoctor',
        'gitPublishPush'
    )
}