buildscript {
  configurations.classpath {
    resolutionStrategy {
      //This is required by 'grgit' version '4.1.1':
      force 'org.eclipse.jgit:org.eclipse.jgit:5.13.0.202109080827-r'
    }
  }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.asciidoctor.jvm.convert' version '3.3.0'
    id 'org.ajoberstar.git-publish' version '3.0.1'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'com.diffplug.spotless' version '5.1.1'
    id 'net.researchgate.release' version '2.6.0'
    id 'de.marcphilipp.nexus-publish' version '0.4.0'
    id 'io.codearte.nexus-staging' version '0.22.0'
}

wrapper {
    gradleVersion = '7.3.3'
}

group = 'fr.jmini.utils'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

repositories {
    jcenter()
}

test {
    useJUnitPlatform()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

signing {
    useGpgCmd()
    sign(publishing.publications)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = "$githubRepositoryName".toString()
                description = 'Java library for matching text'
                packaging = 'jar'
                url = 'https://' + "$githubRepositoryOwner" + '.github.io/' + "$githubRepositoryName" + '/'
                licenses {
                    license {
                        name = 'Eclipse Public License - v 2.0'
                        url = 'https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'jmini'
                        name = 'Jeremie Bresson'
                        email = 'dev@jmini.fr'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
                    developerConnection = 'scm:git:https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
                    url = 'https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '/'
                }
            }
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            packageGroup = 'fr.jmini'
            username = project.findProperty('sonatypeUser') ?: ''
            password = project.findProperty('sonatypePassword') ?: ''
        }
    }
}

nexusStaging {
    packageGroup = 'fr.jmini'
    username = project.findProperty('sonatypeUser') ?: ''
    password = project.findProperty('sonatypePassword') ?: ''
}

def buildDate() {
    return new Date().format('yyyy-MM-dd')
}

configurations {
    asciidoctorExtensions
}

asciidoctorj {
    version = "$asciidoctorjVersion"
}

asciidoctor {
    configurations 'asciidoctorExtensions'
    sourceDir = file('docs')
    baseDirFollowsSourceFile()
    outputDir = file('build/docs/html5')
    attributes = [
        'revdate': "${buildDate()}",
        'project-version' : "$version",
        'last-stable-version' : "$lastVersion",
        'source-highlighter': 'coderay',
        'imagesdir': '',
        'toc': 'left',
        'icons': 'font',
        'sectanchors': 'true',
        'idprefix': '',
        'idseparator': '-',
        'docinfo1': 'true']
    repositories {
        mavenCentral()
    }
    dependencies {
        asciidoctorExtensions 'fr.jmini.asciidoctorj:git-link:3.2.1'
    }
}

gitPublish {
    repoUri = 'git@github.com:' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
    branch = 'gh-pages'

    contents {
        from "${file('build/docs/html5')}"
    }

    preserve {
        include '.nojekyll'
    }

    commitMessage = "Update the 'gh-pages' branch."
}

spotless {
  java {
    importOrder 'java', 'javax', 'org', 'com', ''
    removeUnusedImports()

    // available versions are: https://github.com/diffplug/spotless/tree/master/lib-extra/src/main/resources/com/diffplug/spotless/extra/eclipse_jdt_formatter
    eclipse('4.13.0').configFile('.settings/org.eclipse.jdt.core.prefs')
  }
}

release {
    buildTasks = ['doRelease']
}

task doRelease {
    dependsOn(
        'checkLastVersionValue',
        'publishToSonatype',
        'asciidoctor',
        'gitPublishPush'
    )
}

task checkLastVersionValue {
    doLast {
        if(version.endsWith('SNAPSHOT')) {
            throw new GradleException("version '$version' ends with SNAPSHOT, this is not a release build!")
        }
        if(lastVersion != version) {
            throw new GradleException("lastVersion '$lastVersion' does not match version '$version', fix it in the 'gradle.properties' file.")
        }
    }
}

def updateLastVersionValueTask = tasks.register('updateLastVersionValue') {
    doLast {
        def propertiesFile = file('gradle.properties')
        def content = propertiesFile.text
        content = content.replaceAll("lastVersion=[0-9\\.]+", "lastVersion=" + version.replace('-SNAPSHOT', ''))
        propertiesFile.text = content
    }
}

model {
    tasks.unSnapshotVersion {
        dependsOn updateLastVersionValueTask
    }
}
